skill_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/skills.csv", stringsAsFactors = FALSE)
d <- data.frame(URL="", Skill="", Count=0, stringsAsFactors = FALSE)
for (eachURL in URL_list$WebpageURL[1:5]){
URL_raw<- htmlParse(getURL(eachURL, followlocation = TRUE), asText = T)
URL_clean <- xpathSApply(URL_raw, "//text()[not(ancestor::script)] [not(ancestor::style)] [not(ancestor::noscript)] [not(ancestor::form)]", xmlValue)
URL_clean = paste(URL_clean, collapse = "\n")
for (eachskill in skill_list$Skill) {
d <- rbind(d, c(URL_list[URL_list$WebpageURL==eachURL,2], eachskill,
str_count(tolower(URL_clean), paste0("\\b", tolower(eachskill), "\\b"))))
}
}
library(RCurl)
library(stringr)
library(knitr)
library(XML)
library(rvest)
URL_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/webpages.csv", stringsAsFactors = FALSE)
skill_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/skills.csv", stringsAsFactors = FALSE)
d <- data.frame(URL="", Skill="", Count=0, stringsAsFactors = FALSE)
for (eachURL in URL_list$WebpageURL){
URL_raw<- htmlParse(getURL(eachURL, followlocation = TRUE), asText = T)
URL_clean <- xpathSApply(URL_raw, "//text()[not(ancestor::script)] [not(ancestor::style)] [not(ancestor::noscript)] [not(ancestor::form)]", xmlValue)
URL_clean = paste(URL_clean, collapse = "\n")
for (eachskill in skill_list$Skill) {
d <- rbind(d, c(URL_list[URL_list$WebpageURL==eachURL,2], eachskill,
str_count(tolower(URL_clean), paste0("\\b", tolower(eachskill), "\\b"))))
}
}
write.csv(d, file = "D:/CUNY/Courses/Data Acquisition and Management/CUNY-DAM/Project3/SlackProjects/URLCounts.csv")
# load the RODBC library for access to MySQL server
library(RODBC)
install.packages("RODBC")
library(RODBC)
URL_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/webpages_limited.csv", stringsAsFactors = FALSE)
skill_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/skills_limited.csv", stringsAsFactors = FALSE)
con <- odbcConnect("local_server")
con <- odbcConnect("MYSQL_57")
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), user='user', password='password', dbname='ds_skills', host='KISHORE')
mydb = dbConnect(MySQL(), user='user', password='password', dbname='ds_skills', host='localhost')
mydb = dbConnect(MySQL(), user='root', password='password', dbname='ds_skills', host='localhost')
mydb = dbConnect(MySQL(), user='root', password='root', dbname='ds_skills', host='localhost')
dbListTables(mydb)
con <- odbcConnect("localhost")
con <- odbcConnect("MYSQL57")
View(URL_list)
View(URL_list)
View(skill_list)
View(skill_list)
URL_list = dbSendQuery(mydb, "select doc_id, doc_path as WebpageURL, doc_title as Title from documents where dc_id=2")
URL_list
a<-dbGetQuery(conn = mydb, statement = "select doc_id, doc_path as WebpageURL, doc_title as Title from documents where dc_id=2")
mydb = dbConnect(MySQL(), user='root', password='root', dbname='ds_skills', host='localhost')
URL_list = dbSendQuery(mydb, "select doc_id, doc_path as WebpageURL, doc_title as Title from documents where dc_id=2")
skill_list = dbSendQuery(mydb, "select skill_id, skill_name as Skill from skills")
mydb = dbConnect(MySQL(), user='root', password='root', dbname='ds_skills', host='localhost')
a<-dbGetQuery(conn = mydb, statement = "select doc_id, doc_path as WebpageURL, doc_title as Title from documents where dc_id=2")
View(a)
View(a)
class(a)
mydb = dbConnect(MySQL(), user='root', password='root', dbname='ds_skills', host='localhost')
URL_list = dbGetQuery(conn = mydb, statement = "select doc_id, doc_path as WebpageURL, doc_title as Title from documents where dc_id=2")
skill_list = dbGetQuery(conn = mydb, statement = "select skill_id, skill_name as Skill from skills")
d <- data.frame(URL="", Skill="", Count=0, stringsAsFactors = FALSE)
for (eachURL in URL_list$WebpageURL){
URL_raw<- htmlParse(getURL(eachURL, followlocation = TRUE), asText = T)
URL_clean <- xpathSApply(URL_raw, "//text()[not(ancestor::script)] [not(ancestor::style)] [not(ancestor::noscript)] [not(ancestor::form)]", xmlValue)
URL_clean = paste(URL_clean, collapse = "\n")
for (eachskill in skill_list$Skill) {
d <- rbind(d, c(URL_list[URL_list$WebpageURL==eachURL,2], eachskill,
str_count(tolower(URL_clean), paste0("\\b", tolower(eachskill), "\\b"))))
}
}
library(RCurl)
library(stringr)
library(knitr)
library(XML)
library(rvest)
library(RMySQL)
for (eachURL in URL_list$WebpageURL){
URL_raw<- htmlParse(getURL(eachURL, followlocation = TRUE), asText = T)
URL_clean <- xpathSApply(URL_raw, "//text()[not(ancestor::script)] [not(ancestor::style)] [not(ancestor::noscript)] [not(ancestor::form)]", xmlValue)
URL_clean = paste(URL_clean, collapse = "\n")
for (eachskill in skill_list$Skill) {
d <- rbind(d, c(URL_list[URL_list$WebpageURL==eachURL,2], eachskill,
str_count(tolower(URL_clean), paste0("\\b", tolower(eachskill), "\\b"))))
}
}
URL_list[URL_list$WebpageURL==eachURL,2]
library(RCurl)
library(stringr)
library(knitr)
library(XML)
library(rvest)
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='root', dbname='ds_skills', host='localhost')
URL_list = dbGetQuery(conn = mydb, statement = "select doc_id, doc_path as WebpageURL, doc_title as Title from documents where dc_id=2")
skill_list = dbGetQuery(conn = mydb, statement = "select skill_id, skill_name as Skill from skills")
d <- data.frame(URL="", Skill="", Count=0, stringsAsFactors = FALSE)
eachURL<-URL_list$WebpageURL[1]
eachskill<-skill_list$Skill[1]
View(skill_list)
View(skill_list)
View(URL_list)
View(URL_list)
d <- data.frame(doc_id=0, Skill_id=0, ds_freq=0, stringsAsFactors = FALSE)
URL_list[URL_list$WebpageURL==eachURL,2]
URL_list[URL_list$WebpageURL==eachURL,1]
skill_list[skill_list$Skill==eachskill,1]
d <- data.frame(doc_id=0, Skill_id=0, ds_freq=0, stringsAsFactors = FALSE)
for (eachURL in URL_list$WebpageURL){
URL_raw<- htmlParse(getURL(eachURL, followlocation = TRUE), asText = T)
URL_clean <- xpathSApply(URL_raw, "//text()[not(ancestor::script)] [not(ancestor::style)] [not(ancestor::noscript)] [not(ancestor::form)]", xmlValue)
URL_clean = paste(URL_clean, collapse = "\n")
for (eachskill in skill_list$Skill) {
d <- rbind(d, c(URL_list[URL_list$WebpageURL==eachURL,1], skill_list[skill_list$Skill==eachskill,1],
str_count(tolower(URL_clean), paste0("\\b", tolower(eachskill), "\\b"))))
}
}
dbWriteTable(mydb, 'doc_skills', d, row.names=F, append=T)
mydb = dbConnect(MySQL(), user='root', password='root', dbname='ds_skills', host='localhost')
library(RCurl)
library(stringr)
library(knitr)
library(XML)
library(rvest)
URL_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/webpages.csv", stringsAsFactors = FALSE)
skill_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/skills.csv", stringsAsFactors = FALSE)
library(RODBC)
URL_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/webpages.csv", stringsAsFactors = FALSE)
skill_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/skills.csv", stringsAsFactors = FALSE)
con <- odbcConnect("mysql-localhost")
sqlQuery(con, "use ds_skills")
for(i in 1:nrow(URL_list)) {
# format the required INSERT statement
sql_stmt <- sprintf("INSERT INTO documents (dc_id, doc_path, doc_title ) VALUES (2, '%s', '%s')",
as.character(URL_list$WebpageURL[i]), as.character(URL_list$Title[i]))
sqlQuery(con, sql_stmt)
}
for(i in 1:nrow(skill_list)) {
# make sure all skill types are trimmed of white space and in lower case
skill_type <- str_trim(as.character(tolower(skill_list$Type[i]) ))
# get the skill category unique ID from the skill_category table
sql_stmt <- sprintf("SELECT sc_id FROM skill_category WHERE skill_cat = '%s'",
skill_type)
sc_id <-  as.numeric(sqlQuery(con, sql_stmt))
# make sure all skill names are trimmed of white space and in lower case
skill_name <- str_trim(as.character(tolower(skill_list$Skill[i]) ))
# format the required INSERT statement
sql_stmt <- sprintf("INSERT INTO skills (sc_id, skill_name ) VALUES (%d, '%s')",
sc_id, skill_name)
# print(sql_stmt)
res <- sqlQuery(con, sql_stmt)
# print(res)
}
odbcClose(con)
nrow(URL_list)
source('D:/CUNY/Courses/Data Acquisition and Management/CUNY-DAM/Project3/SlackProjects/Populate_mySQL_V2.R', echo=TRUE)
con <- odbcConnect("local_server")
sqlQuery(con, "use ds_skills")
con <- odbcConnect("local_server")
sqlQuery(con, "use ds_skills")
for(i in 1:nrow(URL_list)) {
# format the required INSERT statement
sql_stmt <- sprintf("INSERT INTO documents (dc_id, doc_path, doc_title ) VALUES (2, '%s', '%s')",
as.character(URL_list$WebpageURL[i]), as.character(URL_list$Title[i]))
sqlQuery(con, sql_stmt)
}
for(i in 1:nrow(skill_list)) {
# make sure all skill types are trimmed of white space and in lower case
skill_type <- str_trim(as.character(tolower(skill_list$Type[i]) ))
# get the skill category unique ID from the skill_category table
sql_stmt <- sprintf("SELECT sc_id FROM skill_category WHERE skill_cat = '%s'",
skill_type)
sc_id <-  as.numeric(sqlQuery(con, sql_stmt))
# make sure all skill names are trimmed of white space and in lower case
skill_name <- str_trim(as.character(tolower(skill_list$Skill[i]) ))
# format the required INSERT statement
sql_stmt <- sprintf("INSERT INTO skills (sc_id, skill_name ) VALUES (%d, '%s')",
sc_id, skill_name)
# print(sql_stmt)
res <- sqlQuery(con, sql_stmt)
# print(res)
}
URL_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/webpages.csv", stringsAsFactors = FALSE)
library(RODBC)
URL_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/webpages.csv", stringsAsFactors = FALSE)
skill_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/skills.csv", stringsAsFactors = FALSE)
library(RODBC)
URL_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/webpages.csv", stringsAsFactors = FALSE)
skill_list <- read.csv("https://raw.githubusercontent.com/RobertSellers/SlackProjects/master/data/skills.csv", stringsAsFactors = FALSE)
con <- odbcConnect("local_server")
sqlQuery(con, "use ds_skills")
for(i in 1:nrow(URL_list)) {
# format the required INSERT statement
sql_stmt <- sprintf("INSERT INTO documents (dc_id, doc_path, doc_title ) VALUES (2, '%s', '%s')",
as.character(URL_list$WebpageURL[i]), as.character(URL_list$Title[i]))
sqlQuery(con, sql_stmt)
message("Done:", i )
}
library(RCurl)
library(stringr)
library(knitr)
library(XML)
library(rvest)
library(RCurl)
library(stringr)
library(knitr)
library(XML)
library(rvest)
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='root', dbname='ds_skills', host='localhost')
library(RCurl)
library(stringr)
library(knitr)
library(XML)
library(rvest)
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='root', dbname='ds_skills', host='localhost')
URL_list = dbGetQuery(conn = mydb, statement = "select doc_id, dc_id, doc_path as WebpageURL, doc_title as Title from documents where dc_id=2")
skill_list = dbGetQuery(conn = mydb, statement = "select skill_id, sc_id, skill_name as Skill from skills")
for (eachURL in URL_list$WebpageURL){
URL_raw<- htmlParse(getURL(eachURL, followlocation = TRUE), asText = T)
URL_clean <- xpathSApply(URL_raw, "//text()[not(ancestor::script)] [not(ancestor::style)] [not(ancestor::noscript)] [not(ancestor::form)]", xmlValue)
URL_clean = paste(URL_clean, collapse = "\n")
for (eachskill in skill_list$Skill) {
d <- rbind(d, c(URL_list[URL_list$WebpageURL==eachURL,1], skill_list[skill_list$Skill==eachskill,1],
str_count(tolower(URL_clean), paste0("\\b", tolower(eachskill), "\\b"))))
}
}
dbWriteTable(mydb, 'doc_skills', d, row.names=F, append=T)
dbDisconnect(mydb)
mydb = dbConnect(MySQL(), user='root', password='root', dbname='ds_skills', host='localhost')
URL_list = dbGetQuery(conn = mydb, statement = "select doc_id, dc_id, doc_path as WebpageURL, doc_title as Title from documents where dc_id=2")
skill_list = dbGetQuery(conn = mydb, statement = "select skill_id, sc_id, skill_name as Skill from skills")
d <- data.frame(doc_id=0, Skill_id=0, ds_freq=0, stringsAsFactors = FALSE)
for (eachURL in URL_list$WebpageURL){
URL_raw<- htmlParse(getURL(eachURL, followlocation = TRUE), asText = T)
URL_clean <- xpathSApply(URL_raw, "//text()[not(ancestor::script)] [not(ancestor::style)] [not(ancestor::noscript)] [not(ancestor::form)]", xmlValue)
URL_clean = paste(URL_clean, collapse = "\n")
for (eachskill in skill_list$Skill) {
d <- rbind(d, c(URL_list[URL_list$WebpageURL==eachURL,1], skill_list[skill_list$Skill==eachskill,1],
str_count(tolower(URL_clean), paste0("\\b", tolower(eachskill), "\\b"))))
}
}
dbWriteTable(mydb, 'doc_skills', d, row.names=F, append=T)
dbDisconnect(mydb)
install.packages("sas7bdat")
library(sas7bdat)
read.sas7bdat("C:/Users/Administrator/Downloads/acbs_2013_child_public_llcp.sas7bdat")
x<-read.sas7bdat("C:/Users/Administrator/Downloads/acbs_2013_child_public_llcp.sas7bdat")
View(x)
View(x)
TB_data_raw <- read.csv("https://raw.githubusercontent.com/kishkp/CUNY-StatsAndProb/master/DataProject/Incidence%20of%20TB.csv", stringsAsFactors = FALSE)
Pollution_data_raw <- read.csv("https://raw.githubusercontent.com/kishkp/CUNY-StatsAndProb/master/DataProject/PM25%20air%20pollution.csv", stringsAsFactors = FALSE)
summary(TB_data_raw)
setwd("D:/CUNY/Courses/Statistics And Probability/CUNY-StatsAndProb")
library(IS606)
startLab("lab5")
startLab("lab6")
by(nc$weight, nc$habit, mean)
load("more/nc.RData")
setwd("D:/CUNY/Courses/Statistics And Probability/CUNY-StatsAndProb/lab5")
load("more/nc.RData")
summary(nc)
by(nc$weight, nc$habit, mean)
library(ggplot2)
geom_boxplot(x=habit, y=weight)
geom_boxplot(x=nc$habit, y=nc$weight)
geom_boxplot(aes((x=nc$habit, y=nc$weight))
geom_boxplot(aes(x=nc$habit, y=nc$weight)
)
g1 <- ggplot(data=nc) + geom_boxplot(aes(x=habit, y=weight))
g1
boxplot(nc$habit, nc$weight)
geom_boxplot(nc$habit, nc$weight)
geom_boxplot(aes(nc$habit, nc$weight)
)
g1 <- ggplot(data=nc) + geom_boxplot(aes(x=c(habit,weight))
)
g1
g1 <- ggplot(data=nc) + geom_boxplot(aes(habit,weight))
g1
boxplot(nc[c("height", "weight")])
boxplot(nc[c("habit", "weight")])
boxplot(weight~habit)
boxplot(nc$weight~nc$habit)
boxplot(aes(nc$weight~nc$habit))
hist(nc$weight~nc$habit)
g1 <- ggplot(data=nc) + geom_bar(aes(x=weight)) + facet_grid(habit ~ .)
g1
barplot(nc$weight~nc$habit)
barplot(nc$habit~nc$weight)
ggplot(data=nc) + geom_bar(aes(x=weight)) + facet_grid(habit ~ .)
hist(nc$weight) + facet_grid(nc$habit ~ .)
ggplot(data=nc) + geom_bar(aes(x=weight)) + facet_grid(habit ~ .)
ggplot(data=nc) + geom_bar(aes(nc$weight)) + facet_grid(nc$habit ~ .)
ggplot(data=nc) + geom_bar(aes(x=nc$weight)) + facet_grid(nc$habit ~ .)
ggplot(data=nc) + geom_bar(aes(x=nc$weight)) + facet_grid(habit ~ .)
ggplot(data=nc) + geom_bar(aes(nc$weight)) + facet_grid(habit ~ .)
ggplot(data=nc) + facet_grid(habit ~ geom_bar(aes(nc$weight)))
ggplot(data=nc) + geom_bar(aes(nc$weight)) + facet_grid(habit ~ .)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
meanWeeks <- mean(nc$weeks, na.rm=TRUE)
meanWeeks
sdWeeks <- sd(nc$weeks, na.rm=TRUE)
sdWeeks
n <- nrow(nc$weeks)
n
seWeeks <- sqrt(sdWeeks / n)
seWeeks
inference(y=nc$weeks, est="mean", type="ci", method="theoretical")
inference(y=nc$weeks, est="mean", type="ci")
inference(y = nc$weight, est = "mean", type = "ci", method = "theoretical")
inference(y = nc$weeks, est = "mean", type = "ci", method = "theoretical")
inference(y = nc$weeks, est = "mean", type = "ci", method = "theoretical", conflevel = 0.90)
inference(y = nc$weight, x = nc$mature, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$mature, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
ggplot(melt(nc), aes(nc$mage, fill = nc$mature)) + geom_histogram(position = "dodge")
ggplot(nc, aes(nc$mage, fill = nc$mature)) + geom_histogram(position = "dodge")
max(nc[nc$mature == "younger mom",]$mage)
min(nc[nc$mature == "mature mom",]$mage)
summary(nc$mage~nc$mature)
table(nc$mage~nc$mature)
ggplot(nc, aes(nc$mage, fill = nc$mature)) + geom_histogram(position = "dodge")
max(nc$mage~nc$mature)
max(nc$mage)
max(nc[nc$mature="younger mom"])
max(nc[nc$mature="younger mom", c("mage")])
max(nc[nc$mature=="younger mom", c("mage")])
min(nc[nc$mature=="younger mom", c("mage")])
min(nc[nc$mature=="mature mon", c("mage")])
min(nc[nc$mature=="mature mom", c("mage")])
max(nc[nc$mature=="younger mom", c("mage")])
min(nc[nc$mature=="mature mom", c("mage")])
View(nc)
View(nc)
summary(nc$premie)
View(nc)
View(nc)
by(nc$gained, nc$gender, length)
ggplot(data=nc) + geom_bar(aes(nc$gained)) + facet_grid(gender ~ .)
inference(y = nc$gained, x = nc$gender, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
load("more/atheism.RData")
load("more/atheism.RData")
setwd("D:/CUNY/Courses/Statistics And Probability/CUNY-StatsAndProb/lab6")
load("more/atheism.RData")
View(atheism)
View(atheism)
View(atheism)
View(atheism)
us12 <- subset(atheism, nationality == "United States" & year == "2012")
frequency(us12)
frequency(us12$response)
View(us12)
View(us12)
hist(us12$response)
barplot(us12$response)
summary(us12$response)
50 / (50+952)
nrow(us12$response=="athesit")
nrow(us12$response=="atheist")
nrow(us12$response=="atheist")
nrow(us12[us12$response=="atheist"])
nrow(us12[us12$response=="atheist",])
Pert <- nrow(us12[us12$response=="atheist",]) / nrow(us12) * 100
Pert
nrow(us12[us12$response=="atheist",])
nrow(us12)
nrow(us12) - nrow(us12[us12$response=="atheist",])
inference(us12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
japan12 <- subset(atheism, nationality == "Japan" & year == "2012")
sweden12 <- subset(atheism, nationality == "Sweden" & year == "2012")
inference(japan12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
inference(sweden12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
inference(japan12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
inference(japan12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
n <- 1000
p <- seq(0, 1, 0.01)
me <- 2 * sqrt(p * (1 - p)/n)
plot(me ~ p, ylab = "Margin of Error", xlab = "Population Proportion")
p <- 0.1
n <- 1040
p_hats <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(c("atheist", "non_atheist"), n, replace = TRUE, prob = c(p, 1-p))
p_hats[i] <- sum(samp == "atheist")/n
}
hist(p_hats, main = "p = 0.1, n = 1040", xlim = c(0, 0.18))
summary(p_hats)
p_hats_summ<-summary(p_hats)
p_hats_summ
p_hats_summ["Mean"]
p_hats_summ["Max"] - p_hats_summ["Min"]
p_hats_summ["Max."] - p_hats_summ["Min."]
p_hats_summ["3rd Qu."] - p_hats_summ["1st Qu."]
var(p_hats)
range(p_hats_summ)
range(p_hats)
par(mfrow = c(2, 2))
p <- 0.1
n <- 1040
p_hats <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(c("atheist", "non_atheist"), n, replace = TRUE, prob = c(p, 1-p))
p_hats[i] <- sum(samp == "atheist")/n
}
hist(p_hats, main = "p = 0.1, n = 1040", xlim = c(0, 0.18))
p <- 0.1
n <- 400
p_hats <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(c("atheist", "non_atheist"), n, replace = TRUE, prob = c(p, 1-p))
p_hats[i] <- sum(samp == "atheist")/n
}
hist(p_hats, main = "p = 0.1, n = 400", xlim = c(0, 0.18))
p <- 0.02
n <- 1040
p_hats <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(c("atheist", "non_atheist"), n, replace = TRUE, prob = c(p, 1-p))
p_hats[i] <- sum(samp == "atheist")/n
}
hist(p_hats, main = "p = 0.02, n = 1040", xlim = c(0, 0.18))
p <- 0.02
n <- 400
p_hats <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(c("atheist", "non_atheist"), n, replace = TRUE, prob = c(p, 1-p))
p_hats[i] <- sum(samp == "atheist")/n
}
hist(p_hats, main = "p = 0.02, n = 400", xlim = c(0, 0.18))
par(mfrow = c(1, 1))
p <- 0.1
n <- 1040
me <- 2 * sqrt(p * (1 - p)/n)
me
# Ecuador ME
p <- 0.02
n <- 400
me <- 2 * sqrt(p * (1 - p)/n)
me
n <- seq(0, 1000, 1)
p <- 0.5
me <- 2 * sqrt(p * (1 - p)/n)
plot(me ~ n, ylab = "Margin of Error", xlab = "N")
aus_me <- 2 * sqrt(0.1 * (1 - 0.1)/1040)
aus_me
ecu_me <- 2 * sqrt(0.02 * (1 - 0.02)/400)
ecu_me
sp_2005<-subset(atheism, nationality == "Spain" && year==2005)
sp <- subset(atheism, nationality == "Spain")
sp2005 <- sp[sp$year == 2005,]
nrow(sp2005)
nrow(sp_2005)
sp_2005<-subset(atheism, nationality == "Spain" && year==2005)
nrow(sp_2005)
View(atheism)
View(atheism)
sp_2005<-subset(atheism, nationality == "Spain" & year==2005)
nrow(sp_2005)
sp_2005<-subset(atheism, nationality == "Spain" & year==2005)
nrow(sp_2005)
sp_2012<-subset(atheism, nationality == "Spain" & year==2012)
nrow(sp_2005)
sp_2005<-subset(atheism, nationality == "Spain" & year==2005)
nrow(sp_2005)
sp_2012<-subset(atheism, nationality == "Spain" & year==2012)
nrow(sp_2012)
sp_2005<-subset(atheism, nationality == "Spain" & year==2005)
sp_2012<-subset(atheism, nationality == "Spain" & year==2012)
inference(sp_2005$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
inference(sp_2012$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
inference(sp_2005$response, est = "mean", type = "ci", method = "theoretical", success = "atheist")
us_2005<-subset(atheism, nationality == "United States" & year==2005)
us_2012<-subset(atheism, nationality == "United States" & year==2012)
inference(us_2005$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
inference(us_2012$response, est = "proportion", type = "ci", method = "theoretical", success = "atheist")
p <- 0.5
me <- 0.01
n <- (p - p^2) / (me / 1.96)^2
n
require(stringr)
subfix<-function(fn, incr, dirpath) {
con=file(paste(dirpath, fn, sep=""),open="r")
txtLines=readLines(con)
long=length(txtLines)
for (i in 1:long){
if(length(grep("-->",txtLines[i]))>0) {
ln<-txtLines[i]
txtLines[i]<-paste(substr(strptime(substr(ln,1,8), "%H:%M:%S") + incr,12,23), substr(ln,9,17), substr(strptime(substr(ln,18,25), "%H:%M:%S") + incr,12,23), substr(ln,26,29), sep="")
}
}
close(con)
write(txtLines, file = paste(dirpath, fn, sep=""), ncolumns = 1, append = FALSE, sep = "\n")
return
}
dirpath<-"G:/Star Trek Voyager/"
incr=21
fn <- "Star.Trek.Voyager.s07e01.Unimatrix.Zero.Part.2.x264-LMK.srt"
# Single file
subfix(fn, incr, dirpath)
