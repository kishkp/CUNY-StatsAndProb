price_max<- sqldf("Select Mn, City, max(Price) as Price from price_mean group by Mn, City order by city, Mn")
View(price_max)
View(price_max)
sqldf("select  max(a.Price) from price_mean as a group by a.City order by a.city")
sqldf("select  City,max(a.Price) from price_mean as a group by a.City order by a.city")
price_max<- sqldf("Select a.* from price_mean as a where a.Price = select max(b.Price) as Price from price_mean as b group by b.City order by b.city having b.City=a.City")
price_max<- sqldf("Select a.* from price_mean as a where a.Price in (select max(b.Price) as Price from price_mean as b group by b.City order by b.city having b.City=a.City)")
price_max<- sqldf("Select a.* from price_mean as a where a.Price in (select max(b.Price) as Price from price_mean as b group by b.City having b.City=a.City)")
View(price_max)
View(price_max)
UCAP_cities <-UCAP_raw %>% spread(City, Price, convert = TRUE)
View(UCAP_cities)
View(UCAP_cities)
View(UCAP_cities)
View(UCAP_cities)
UCAP_cities %>% select(NYC, ROS)
UCAP_cities %>% select(NYC, ROS) %>% mutate(price_diff = NYC - ROS)
UCAP_cities <- UCAP_cities %>% select(NYC, ROS) %>% mutate(price_diff = NYC - ROS)
ave(UCAP_cities$price_diff)
summarise(UCAP_cities, mean(UCAP_cities$price_diff))
summarise(UCAP_cities, mean(UCAP_cities$price_diff, na.rm=TRUE))
summarise(UCAP_cities, Diff = mean(UCAP_cities$price_diff, na.rm=TRUE))
price_mean<- sqldf("Select Year, avg(Price) as Price from UCAP_raw group by Year order by year")
View(UCAP_raw)
View(UCAP_raw)
price_mean<- sqldf("Select Yr, avg(Price) as Price from UCAP_raw group by Yr order by Yr")
View(price_mean)
View(price_mean)
price_max <- sqldf("Select Yr, max(Price) from price_mean")
View(price_mean)
View(price_mean)
View(price_max)
View(price_max)
UCAP_AucType <- UCAP_raw %>% spread(AuctionType, Price, convert = TRUE)
View(UCAP_AucType)
View(UCAP_AucType)
View(UCAP_AucType)
View(UCAP_AucType)
UCAP_AucType <- UCAP_raw %>% spread(AuctionType, Price, convert = TRUE)
UCAP_AucType <- UCAP_AucType %>% select(Monthly, Spot)
View(UCAP_AucType)
View(UCAP_AucType)
summarise_each(UCAP_AucType, funs(var))
summarise_each(UCAP_AucType, funs(var, na.rm=TRUE))
UCAP_AucType <- UCAP_AucType %>% select(Monthly, Spot) %>% filter(Monthly !is.na)
UCAP_AucType <- UCAP_AucType %>% select(Monthly, Spot) %>% filter(!is.na(Monthly))
View(UCAP_AucType)
View(UCAP_AucType)
UCAP_AucType <- UCAP_AucType %>% select(Monthly, Spot) %>% filter(!is.na(Monthly)) %>% filter(!is.na(Spot))
summarise_each(UCAP_AucType, funs(var, na.rm=TRUE))
View(UCAP_AucType)
View(UCAP_AucType)
UCAP_AucType <- UCAP_raw %>% spread(AuctionType, Price, convert = TRUE)
UCAP_AucType <- UCAP_AucType %>% select(Monthly, Spot) %>% filter(!is.na(Monthly)) %>% filter(!is.na(Spot))
View(UCAP_AucType)
View(UCAP_AucType)
summarise_each(UCAP_AucType, funs(var))
summarise_each(UCAP_AucType, funs(var))
MobApp_raw<-read.csv("https://raw.githubusercontent.com/kishkp/CUNY-DAM/master/UCAP.csv", stringsAsFactors = FALSE, check.names = FALSE, na.strings = c("", "NA"), header = TRUE, skip = 2)
View(MobApp_raw)
View(MobApp_raw)
MobApp_raw<-read.csv("https://raw.githubusercontent.com/kishkp/CUNY-DAM/master/MobileAppDownload.csv", stringsAsFactors = FALSE, check.names = FALSE, na.strings = c("", "NA"), header = TRUE, skip = 2)
View(MobApp_raw)
View(MobApp_raw)
rename(MobApp_raw, 4:10)
rename(MobApp_raw, 4:10, "Apple_")
rename(MobApp_raw, 4:10, num_range("Apple_", 1:5, width=4))
rename(MobApp_raw, 4:10, num_range("Apple_", 1:7, width=4))
colnames(MobApp_raw)
colnames(MobApp_raw)[1:4]
colnames(MobApp_raw)[4:10]
colnames(MobApp_raw)[4:10] <- paste("Apple", colnames(MobApp_raw)[4:10], sep="_" )
View(MobApp_raw)
View(MobApp_raw)
colnames(MobApp_raw)[11:17] <- paste("Google", colnames(MobApp_raw)[11:17], sep="_" )
View(MobApp_raw)
View(MobApp_raw)
colnames(MobApp_raw)[c(1, 3)]
colnames(MobApp_raw)[c(1, 3)] <- c("AppName", "Paid_Free" )
View(MobApp_raw)
View(MobApp_raw)
MobApp_raw
View(MobApp_raw)
View(MobApp_raw)
gather(Yr, dnloads, Apple_2010:Apple_2015, na.rm = TRUE)
gather(Yr, dnl, 5:10, na.rm = TRUE)
MobApp_raw %>% gather(Yr, dnloads, Apple_2010:Apple_2015, na.rm = TRUE)
MobApp_raw %>% gather(Yr, dnloads, Apple_2010:Apple_2015, na.rm = TRUE) %>% gather(Yr, dnloads, Google_2010:Google_2015, na.rm = TRUE)
select(MobApp_raw, AppName,Paid_Free, )
select(MobApp_raw, c("AppName","Paid_Free") )
select(MobApp_raw, c(1,2) )
select(MobApp_raw, c(1,3,2) )
MobApp_raw %>% select(c(1:4, 11, 5:10, 12:17)
)
x<- MobApp_raw %>% select(c(1:4, 11, 5:10, 12:17)) %>% gather(Yr, dnloads, Apple_2010:Google_2015, na.rm = TRUE)
View(x)
View(x)
View(MobApp_raw)
View(MobApp_raw)
a<- c("Apple_regdate", "Google_regdate")
a<- c("Apple_regdate", "Google_regdate")
a
df <- data.frame(
id = 1:10,
time = as.Date('2009-01-01') + 0:9,
Q3.2.1. = rnorm(10, 0, 1),
Q3.2.2. = rnorm(10, 0, 1),
Q3.2.3. = rnorm(10, 0, 1),
Q3.3.1. = rnorm(10, 0, 1),
Q3.3.2. = rnorm(10, 0, 1),
Q3.3.3. = rnorm(10, 0, 1)
)
df
df %>% gather(loop_number, Q3.2, starts_with("Q3.2"))
b<-df %>% gather(loop_number, Q3.2, starts_with("Q3.2"))
MobApp_raw %>% gather(Store, char_Value, starts_with("Apple"))
MobApp_raw %>% gather(Store, char_Value, starts_with("Apple")) %>% gather(Store, char_Value, starts_with("Google"))
x<-MobApp_raw %>% gather(Store, char_Value, starts_with("Apple")) %>% gather(Store, char_Value, starts_with("Google"))
View(x)
View(x)
MobApp_raw<-read.csv("https://raw.githubusercontent.com/kishkp/CUNY-DAM/master/MobileAppDownload.csv", stringsAsFactors = FALSE, check.names = FALSE, na.strings = c("", "NA"), header = TRUE, skip = 2)
View(MobApp_raw)
View(MobApp_raw)
select(MobApp_raw, c(1:10), Store="Apple")
select(MobApp_raw, c(1:10)) %>% mutate(store="Apple")
select(MobApp_raw, c(1:10))
select(MobApp_raw, c(1:3))
# Assign headers for the "Apple" set of columns
colnames(MobApp_raw)[4:10] <- paste("Apple", colnames(MobApp_raw)[4:10], sep="_" )
# Assign headers for the "Google" set of columns
colnames(MobApp_raw)[11:17] <- paste("Google", colnames(MobApp_raw)[11:17], sep="_" )
colnames(MobApp_raw)[c(1, 3)] <- c("AppName", "Paid_Free" )
select(MobApp_raw, c(1:10))
select(MobApp_raw, c(1:10)) %>% mutate(store="Apple")
select(MobApp_raw, c(1:10)) %>% mutate(store="Apple")
rename(MobApp_raw, starts_with("Apple"))
rename(MobApp_raw, from=starts_with("Apple"), to=c(5:10) )
rename(MobApp_raw, c("Apple_"=""))
rename(MobApp_raw, c("Apple_" = "a"))
rename(MobApp_raw, gsub("Apple_", "X"))
rename(MobApp_raw, c(matches("Apple_")=""))
rename(MobApp_raw, c(matches("Apple_") = ""))
rename(MobApp_raw, c(matches("Apple_")))
select(MobApp_raw, matches("Apple_"))
select(MobApp_raw, matches("Apple_") = "A")
select(MobApp_raw, "A"=matches("Apple_"))
select(MobApp_raw, =matches("Apple_"))
select(MobApp_raw, matches("Apple_"))
MobApp_raw<-read.csv("https://raw.githubusercontent.com/kishkp/CUNY-DAM/master/MobileAppDownload.csv", stringsAsFactors = FALSE, check.names = FALSE, na.strings = c("", "NA"), header = TRUE, skip = 2)
View(MobApp_raw)
View(MobApp_raw)
select(MobApp_raw, c(1:10))
MobApp_raw<-read.csv("https://raw.githubusercontent.com/kishkp/CUNY-DAM/master/MobileAppDownload.csv", stringsAsFactors = FALSE, check.names = FALSE, na.strings = c("", "NA"), header = TRUE, skip = 2)
MobApp_raw[, c(1:10)]
df1<-cbind(MobApp_raw[, c(1:10)], Store="Apple")
View(df1)
View(df1)
View(MobApp_raw)
View(MobApp_raw)
df2<-cbind(MobApp_raw[, c(1:3, 11:17)], Store="Google")
MobApp_raw <- rbind(df1, df2)
View(MobApp_raw)
View(MobApp_raw)
gather(MobApp_raw, Yr, Dnl)
gather(MobApp_raw, Yr, Dnl, convert = TRUE)
gather(MobApp_raw, Yr, Dnl, convert = TRUE, )
gather(MobApp_raw, Yr, Dnl, convert = TRUE )
View(MobApp_raw)
View(MobApp_raw)
gather(MobApp_raw, Yr, Dnl, 2010:2015 convert = TRUE )
gather(MobApp_raw, Yr, Dnl, 2010:2015 ,convert = TRUE )
gather(MobApp_raw, Yr, Dnl, c(2010:2015) ,convert = TRUE )
View(MobApp_raw)
View(MobApp_raw)
gather(MobApp_raw, Yr, Dnl, c(5:10) ,convert = TRUE )
gather(MobApp_raw, Yr, Dnl, c(5:10) ,convert = TRUE, na.rm = TRUE )
MobApp_raw <-gather(MobApp_raw, Yr, Dnl, c(5:10) ,convert = TRUE, na.rm = TRUE )
View(MobApp_raw)
View(MobApp_raw)
# Read the data from github and skip the first 2 lines.
MobApp_raw<-read.csv("https://raw.githubusercontent.com/kishkp/CUNY-DAM/master/MobileAppDownload.csv", stringsAsFactors = FALSE, check.names = FALSE, na.strings = c("", "NA"), header = TRUE, skip = 2)
# Extract the columns for Apple
df1<-cbind(MobApp_raw[, c(1:10)], Store="Apple")
# Extract the columns for Google
df2<-cbind(MobApp_raw[, c(1:3, 11:17)], Store="Google")
# combine both these data sets
MobApp_raw <- rbind(df1, df2)
# Convert the data from "Wide" to "Long" format.
MobApp_raw <-gather(MobApp_raw, Yr, Dnl, c(5:10) ,convert = TRUE, na.rm = TRUE )
View(MobApp_raw)
View(MobApp_raw)
separate(MobApp_raw, Yr)
separate(MobApp_raw, Yr, c("m", "d", "y"))
separate(MobApp_raw, ReleaseDate, c("m", "d", "y"))
names(MobApp_raw)
View(MobApp_raw)
View(MobApp_raw)
colnames(MobApp_raw) [c(1,3,4)] <- c("AppName", "PaidFree", "ReleaseDate")
View(MobApp_raw)
View(MobApp_raw)
separate(MobApp_raw, ReleaseDate, c("m", "d", "y"))
View(MobApp_raw)
View(MobApp_raw)
separate(MobApp_raw, ReleaseDate, c("m", "d", "y"), remove=FALSE)
# Read the data from github and skip the first 2 lines.
MobApp_raw<-read.csv("https://raw.githubusercontent.com/kishkp/CUNY-DAM/master/MobileAppDownload.csv", stringsAsFactors = FALSE, check.names = FALSE, na.strings = c("", "NA"), header = TRUE, skip = 2)
# Extract the columns for Apple
df1<-cbind(MobApp_raw[, c(1:10)], Store="Apple")
# Extract the columns for Google
df2<-cbind(MobApp_raw[, c(1:3, 11:17)], Store="Google")
# combine both these data sets
MobApp_raw <- rbind(df1, df2)
# Convert the data from "Wide" to "Long" format.
MobApp_raw <-gather(MobApp_raw, Yr, Dnl, c(5:10) ,convert = TRUE, na.rm = TRUE )
# Rename some columns to remove spaces and special characters
colnames(MobApp_raw) [c(1,3,4)] <- c("AppName", "PaidFree", "ReleaseDate")
# separate(MobApp_raw, ReleaseDate, c("m", "d", "y"), remove=FALSE)
head(UCAP_raw)
# Read the data from github and skip the first 2 lines.
MobApp_raw<-read.csv("https://raw.githubusercontent.com/kishkp/CUNY-DAM/master/MobileAppDownload.csv", stringsAsFactors = FALSE, check.names = FALSE, na.strings = c("", "NA"), header = TRUE, skip = 2)
# Extract the columns for Apple
df1<-cbind(MobApp_raw[, c(1:10)], Store="Apple")
# Extract the columns for Google
df2<-cbind(MobApp_raw[, c(1:3, 11:17)], Store="Google")
# combine both these data sets
MobApp_raw <- rbind(df1, df2)
# Convert the data from "Wide" to "Long" format.
MobApp_raw <-gather(MobApp_raw, Yr, Dnl, c(5:10) ,convert = TRUE, na.rm = TRUE )
# Rename some columns to remove spaces and special characters
colnames(MobApp_raw) [c(1,3,4)] <- c("AppName", "PaidFree", "ReleaseDate")
# separate(MobApp_raw, ReleaseDate, c("m", "d", "y"), remove=FALSE)
head(MobApp_raw)
free_max_per_year <- filter(MobApp_raw, PaidFree="Free")
View(MobApp_raw)
View(MobApp_raw)
free_max_per_year <- filter(MobApp_raw, PaidFree=="Free")
View(free_max_per_year)
View(free_max_per_year)
free_max <- filter(MobApp_raw, PaidFree=="Free")
# Read the data from github and skip the first 2 lines.
MobApp_raw<-read.csv("https://raw.githubusercontent.com/kishkp/CUNY-DAM/master/MobileAppDownload.csv", stringsAsFactors = FALSE, check.names = FALSE, na.strings = c("", "NA"), header = TRUE, skip = 2)
# Extract the columns for Apple
df1<-cbind(MobApp_raw[, c(1:10)], Store="Apple")
# Extract the columns for Google
df2<-cbind(MobApp_raw[, c(1:3, 11:17)], Store="Google")
# combine both these data sets
MobApp_raw <- rbind(df1, df2)
# Convert the data from "Wide" to "Long" format.
MobApp_raw <-gather(MobApp_raw, Yr, Dnl, c(5:10) ,convert = TRUE, na.rm = TRUE )
# Rename some columns to remove spaces and special characters
colnames(MobApp_raw) [c(1,3,4)] <- c("AppName", "PaidFree", "ReleaseDate")
# separate(MobApp_raw, ReleaseDate, c("m", "d", "y"), remove=FALSE)
head(MobApp_raw)
free_max <- filter(MobApp_raw, PaidFree=="Free")
write.csv(MobApp_raw, "D:/CUNY/Courses/Data Acquisition and Management/mob.csv")
x<- MobApp_raw %>% filter(PaidFree=="Free") %>% group_by(Yr) %>% summarise(max(Dnl))
View(x)
View(x)
x<- MobApp_raw %>% filter(PaidFree=="Free") %>% group_by(Yr)
View(x)
View(x)
x<- MobApp_raw %>% filter(PaidFree=="Free") %>% group_by(Yr) %>% summarize(max(Dnl))
x<- MobApp_raw %>% filter(PaidFree=="Free") %>% group_by(Yr) %>% group_by(Store) %>% summarize(max(Dnl))
View(x)
View(x)
x<- MobApp_raw %>% filter(PaidFree=="Free") %>% group_by(as.character(Yr)) %>% group_by(Store) %>% summarize(max(Dnl))
x<- MobApp_raw %>% group_by(PaidFree) %>% summarize(max(Dnl))
x<- MobApp_raw %>% group_by(PaidFree) %>% summarize(a=n())
View(x)
View(x)
class(MobApp_raw)
MobApp_raw %>% group_by(PaidFree) %>% summarise(a = n(), b = a + 1)
by_cyl <- MobApp_raw %>% group_by(PaidFree)
by_cyl %>% summarise(a = n(), b = a + 1)
View(by_cyl)
View(by_cyl)
by_cyl %>% summarise(n(), b = a + 1)
by_cyl %>% summarise(mean(Dnl))
free_max_per_year<- sqldf("Select a.* from free_max as a where a.Dnl in (select max(b.Dnl) as Dnl from free_max as b group by b.Yr having b.Yr=a.Yr)")
# Read the data from github and skip the first 2 lines.
MobApp_raw<-read.csv("https://raw.githubusercontent.com/kishkp/CUNY-DAM/master/MobileAppDownload.csv", stringsAsFactors = FALSE, check.names = FALSE, na.strings = c("", "NA"), header = TRUE, skip = 2)
# Extract the columns for Apple
df1<-cbind(MobApp_raw[, c(1:10)], Store="Apple")
# Extract the columns for Google
df2<-cbind(MobApp_raw[, c(1:3, 11:17)], Store="Google")
# combine both these data sets
MobApp_raw <- rbind(df1, df2)
# Convert the data from "Wide" to "Long" format.
MobApp_raw <-gather(MobApp_raw, Yr, Dnl, c(5:10) ,convert = TRUE, na.rm = TRUE )
# Rename some columns to remove spaces and special characters
colnames(MobApp_raw) [c(1,3,4)] <- c("AppName", "PaidFree", "ReleaseDate")
# separate(MobApp_raw, ReleaseDate, c("m", "d", "y"), remove=FALSE)
head(MobApp_raw)
free_max <- filter(MobApp_raw, PaidFree=="Free")
# select the App that has the max download per year
free_max_per_year<- sqldf("Select a.* from free_max as a where a.Dnl in (select max(b.Dnl) as Dnl from free_max as b group by b.Yr having b.Yr=a.Yr)")
View(free_max_per_year)
View(free_max_per_year)
paid_max <- filter(MobApp_raw, PaidFree=="Paid")
# select the App that has the max download per year
paid_max_per_year<- sqldf("Select a.* from paid_max as a where a.Dnl in (select max(b.Dnl) as Dnl from paid_max as b group by b.Yr having b.Yr=a.Yr)")
# The max downloads per year is as follows:
paid_max_per_year
avg_dnl <- sqldf("Select Store, App, avg(Dnl) as Avg_Dnls from MobMobApp_raw group by Store, App")
avg_dnl <- sqldf("Select Store, App, avg(Dnl) as Avg_Dnls from MobApp_raw group by Store, App")
View(MobApp_raw)
View(MobApp_raw)
avg_dnl <- sqldf("Select Store, AppName, avg(Dnl) as Avg_Dnls from MobApp_raw group by Store, App")
avg_dnl <- sqldf("Select Store, AppName, avg(Dnl) as Avg_Dnls from MobApp_raw group by Store, AppName")
View(avg_dnl)
View(avg_dnl)
avg_app_dnl <- sqldf("Select AppName, avg(Dnl) as Avg_Dnls from MobApp_raw group by AppName")
# The Avg downloads per App is as follows:
avg_app_dnl
install.library("IS606")
install.packages("IS606")
library('IS606')
setwd("D:/CUNY/Courses/Statistics And Probability/CUNY-StatsAndProb")
startLab("Lab4")
startLab(Lab4)
startLab("Lab4")
startLab("Lab4a")
startLab("Lab4b")
load("more/ames.RData")
pwd
pwd()
getwd
getwd()
setwd("D:/CUNY/Courses/Statistics And Probability/CUNY-StatsAndProb/Lab4a")
load("more/ames.RData")
load("more/ames.RData")
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
summary(area)
hist(area)
samp1 <- sample(area, 50)
summary(samp1)
hist(samp1)
mean(samp1)
samp2 <- sample(area, 50)
mean(samp2)
samp100 <- sample(area, 100)
mean(samp100)
samp100 <- sample(area, 1000)
mean(samp1000)
samp2 <- sample(area, 50)
mean(samp2)
samp2 <- sample(area, 50)
mean(samp2)
samp100 <- sample(area, 100)
mean(samp100)
samp1000 <- sample(area, 1000)
mean(samp1000)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
hist(sample_means50, breaks = 25)
mean(sample_means50)
hist(sample_means50, breaks = 100)
hist(sample_means50, breaks = 50)
median(sample_means50)
hist(samp1, breaks=10)
sample_means50 <- rep(NA, 5000)
samp <- sample(area, 50)
sample_means50[1] <- mean(samp)
sample_means50 <- rep(NA, 5000)
samp <- sample(area, 50)
sample_means50[1] <- mean(samp)
samp <- sample(area, 50)
sample_means50[2] <- mean(samp)
samp <- sample(area, 50)
sample_means50[3] <- mean(samp)
samp <- sample(area, 50)
sample_means50[4] <- mean(samp)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
print(i)
}
sample_means_small <- rep(0, 100)
for(i in 1:100){
sample_means_small[i] <- mean(sample(area, 50))
}
sample_means_small
hist(sample_means50)
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits <- range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits <- range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
samp1 <- sample(price, 50)
mean(samp1)
samp1 <- sample(price, 50)
mean(samp1)
mean(samp1)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50, breaks=25)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50, breaks=50)
mean(sample_means50)
mean(price)
sample_means150 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(price, 150)
sample_means150[i] <- mean(samp)
}
hist(sample_means150, breaks=50)
mean(sample_means150)
setwd("D:/CUNY/Courses/Statistics And Probability/CUNY-StatsAndProb/Lab4b")
load("more/ames.RData")
load("more/ames.RData")
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
hist(samp)
hist(samp, breaks =100)
hist(samp, breaks =50)
25
hist(samp, breaks =25)
hist(samp, breaks =10)
hist(samp, breaks =5)
mean(samp)
mode(samp)
median(samp)
hist(samp, breaks =25)
hist(ppopulation)
hist(population)
hist(population, 100)
samp <- sample(population, 60)
hist(samp)
samp <- sample(population, 60)
hist(samp)
samp <- sample(population, 60)
hist(samp)
se <- sd(samp) / sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
se <- sd(samp) / sqrt(60)
lower <- sample_mean - 1.96 * se
load("more/ames.RData")
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
sample_mean <- mean(samp)
se <- sd(samp) / sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
c(lower, upper)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
plot_ci(lower_vector, upper_vector, mean(population))
x<- lower_vector >= mean(population) >= upper_vector
x<- lower_vector > mean(population) > upper_vector
x<- lower_vector > mean(population)
x
x<- lower_vector < mean(population)
x<- lower_vector < mean(population)
x
=5/50
5/50
1 - (5/50)
1 - (5/50)*100
(1 - (5/50))*100
hist(population)
(1 - (2/50)) * 100
lower_vector <- samp_mean - 2.58 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 2.58 * samp_sd / sqrt(n)
plot_ci(lower_vector, upper_vector, mean(population))
