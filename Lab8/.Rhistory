addConstraint(graph, "AircraftType", "Model")
fl_smp <- flights[sample(nrow(flights), 500, replace = FALSE), ]
addConstraint(graph, "Flight", "flight_id")
for (i in 1:nrow(fl_smp)) {
flight = getOrCreateNode(graph, "Flight", flight_id = row.names(fl_smp[i,]), year = fl_smp[i,1],
month  = fl_smp[i,2], day  = fl_smp[i,3], dep_time  = fl_smp[i,4], dep_delay  = fl_smp[i,5], arr_time  = fl_smp[i,6], arr_delay  = fl_smp[i,7], carrier  = fl_smp[i,8], tailnum  = fl_smp[i,9], flight  = fl_smp[i,10], origin  = fl_smp[i,11], dest  = fl_smp[i,12], air_time  = fl_smp[i,13], distance  = fl_smp[i,14], hour  = fl_smp[i,15], minute  = fl_smp[i,16])
airline = getOrCreateNode(graph, "Airline", carrier = fl_smp[8])
createRel(flight, "OWNED_BY", airline)
orig = getOrCreateNode(graph, "Orig", Faa = fl_smp[11])
createRel(flight, "FLEW_FROM", orig)
dest = getOrCreateNode(graph, "Dest", Faa = fl_smp[11])
createRel(flight, "FLEW_TO", dest)
plane = getOrCreateNode(graph, "Plane", Tailnum = fl_smp[9])
createRel(flight, "BY_PLANE", plane)
message("Done: ", i)
}
flight = getOrCreateNode(graph, "Flight", flight_id = row.names(fl_smp[i,]), year = fl_smp[i,1],
month  = fl_smp[i,2], day  = fl_smp[i,3], dep_time  = fl_smp[i,4], dep_delay  = fl_smp[i,5], arr_time  = fl_smp[i,6], arr_delay  = fl_smp[i,7], carrier  = fl_smp[i,8], tailnum  = fl_smp[i,9], flight  = fl_smp[i,10], origin  = fl_smp[i,11], dest  = fl_smp[i,12], air_time  = fl_smp[i,13], distance  = fl_smp[i,14], hour  = fl_smp[i,15], minute  = fl_smp[i,16])
airline = getOrCreateNode(graph, "Airline", carrier = fl_smp[8])
createRel(flight, "OWNED_BY", airline)
fl_smp[8]
for (i in 1:nrow(fl_smp)) {
flight = getOrCreateNode(graph, "Flight", flight_id = row.names(fl_smp[i,]), year = fl_smp[i,1],
month  = fl_smp[i,2], day  = fl_smp[i,3], dep_time  = fl_smp[i,4], dep_delay  = fl_smp[i,5], arr_time  = fl_smp[i,6], arr_delay  = fl_smp[i,7], carrier  = fl_smp[i,8], tailnum  = fl_smp[i,9], flight  = fl_smp[i,10], origin  = fl_smp[i,11], dest  = fl_smp[i,12], air_time  = fl_smp[i,13], distance  = fl_smp[i,14], hour  = fl_smp[i,15], minute  = fl_smp[i,16])
airline = getOrCreateNode(graph, "Airline", carrier = fl_smp[i,8])
createRel(flight, "OWNED_BY", airline)
orig = getOrCreateNode(graph, "Orig", Faa = fl_smp[i,11])
createRel(flight, "FLEW_FROM", orig)
dest = getOrCreateNode(graph, "Dest", Faa = fl_smp[i,11])
createRel(flight, "FLEW_TO", dest)
plane = getOrCreateNode(graph, "Plane", Tailnum = fl_smp[i,9])
createRel(flight, "BY_PLANE", plane)
message("Done: ", i)
}
summary(graph)
View(flights)
View(flights)
View(airlines)
View(airlines)
View(fl_smp)
View(fl_smp)
View(airports)
View(airports)
View(airlines)
View(airlines)
View(airports)
View(airports)
View(fl_smp)
View(fl_smp)
View(airports)
View(airports)
View(airlines)
View(airlines)
airlines
as.character(airlines)
airlines
View(airlines)
airports[1:10,]
airlines[1,1]
airlines[1,2]
airlines[1,1]
airlines[1,2]
as.character(airlines[1,2])
as.character(airlines[1,])
airlines = dbGetQuery(conn = mydb, statement = "Select * from airlines")
View(airlines)
View(airlines)
airlines
airlines = dbGetQuery(conn = mydb, statement = "Select * from airlines where 1=1")
airlines
airlines[1,2]
airlines[1,1]
View(airlines)
View(airlines)
View(fl_smp)
View(fl_smp)
query <- "MATCH (n1:Flight {month:12})-[:FLEW_FROM]->(n2:Orig {Faa:'EWR'}) RETURN n1,n2 ;"
cypher(graph, query)
cypherToList(graph, query)
unlist(cypherToList(graph, query))
query <- "MATCH (n1:Flight {month:12})-[:FLEW_FROM]->(n2:Orig {Faa:'EWR'}) RETURN n1,n2 ;"
cypherToList(graph, query)
query <- "MATCH (n1:Flight {month:12})-[:FLEW_FROM]->(n2:Orig {Faa:'EWR'}) RETURN n1,n2 ;"
x1<-cypherToList(graph, query)
unlist(x1[1])
unlist(x1[[1])
unlist(x1[[1]])
require(stringr)
subfix<-function(fn, incr, dirpath) {
con=file(paste(dirpath, fn, sep=""),open="r")
txtLines=readLines(con)
long=length(txtLines)
for (i in 1:long){
if(length(grep("-->",txtLines[i]))>0) {
ln<-txtLines[i]
txtLines[i]<-paste(substr(strptime(substr(ln,1,8), "%H:%M:%S") + incr,12,23), substr(ln,9,17), substr(strptime(substr(ln,18,25), "%H:%M:%S") + incr,12,23), substr(ln,26,29), sep="")
}
}
close(con)
write(txtLines, file = paste(dirpath, fn, sep=""), ncolumns = 1, append = FALSE, sep = "\n")
return
}
dirpath<-"C:/Users/Administrator/Downloads"
incr=5
fn <- "Dead Pool.srt"
# Single file
subfix(fn, incr, dirpath)
require(stringr)
subfix<-function(fn, incr, dirpath) {
con=file(paste(dirpath, fn, sep=""),open="r")
txtLines=readLines(con)
long=length(txtLines)
for (i in 1:long){
if(length(grep("-->",txtLines[i]))>0) {
ln<-txtLines[i]
txtLines[i]<-paste(substr(strptime(substr(ln,1,8), "%H:%M:%S") + incr,12,23), substr(ln,9,17), substr(strptime(substr(ln,18,25), "%H:%M:%S") + incr,12,23), substr(ln,26,29), sep="")
}
}
close(con)
write(txtLines, file = paste(dirpath, fn, sep=""), ncolumns = 1, append = FALSE, sep = "\n")
return
}
dirpath<-"C:/Users/Administrator/Downloads/"
incr=5
fn <- "Dead Pool.srt"
# Single file
subfix(fn, incr, dirpath)
require(stringr)
subfix<-function(fn, incr, dirpath) {
con=file(paste(dirpath, fn, sep=""),open="r")
txtLines=readLines(con)
long=length(txtLines)
for (i in 1:long){
if(length(grep("-->",txtLines[i]))>0) {
ln<-txtLines[i]
txtLines[i]<-paste(substr(strptime(substr(ln,1,8), "%H:%M:%S") + incr,12,23), substr(ln,9,17), substr(strptime(substr(ln,18,25), "%H:%M:%S") + incr,12,23), substr(ln,26,29), sep="")
}
}
close(con)
write(txtLines, file = paste(dirpath, fn, sep=""), ncolumns = 1, append = FALSE, sep = "\n")
return
}
dirpath<-"G:/"
incr=31
fn <- "Dead Pool.srt"
require(stringr)
subfix<-function(fn, incr, dirpath) {
con=file(paste(dirpath, fn, sep=""),open="r")
txtLines=readLines(con)
long=length(txtLines)
for (i in 1:long){
if(length(grep("-->",txtLines[i]))>0) {
ln<-txtLines[i]
txtLines[i]<-paste(substr(strptime(substr(ln,1,8), "%H:%M:%S") + incr,12,23), substr(ln,9,17), substr(strptime(substr(ln,18,25), "%H:%M:%S") + incr,12,23), substr(ln,26,29), sep="")
}
}
close(con)
write(txtLines, file = paste(dirpath, fn, sep=""), ncolumns = 1, append = FALSE, sep = "\n")
return
}
dirpath<-"G:/"
incr=31
fn <- "Dead Pool.srt"
# Single file
subfix(fn, incr, dirpath)
require(stringr)
subfix<-function(fn, incr, dirpath) {
con=file(paste(dirpath, fn, sep=""),open="r")
txtLines=readLines(con)
long=length(txtLines)
for (i in 1:long){
if(length(grep("-->",txtLines[i]))>0) {
ln<-txtLines[i]
txtLines[i]<-paste(substr(strptime(substr(ln,1,8), "%H:%M:%S") + incr,12,23), substr(ln,9,17), substr(strptime(substr(ln,18,25), "%H:%M:%S") + incr,12,23), substr(ln,26,29), sep="")
}
}
close(con)
write(txtLines, file = paste(dirpath, fn, sep=""), ncolumns = 1, append = FALSE, sep = "\n")
return
}
dirpath<-"G:/"
incr=-10
fn <- "Tom Clancys Division Agents Origin.srt"
# Single file
subfix(fn, incr, dirpath)
require(stringr)
subfix<-function(fn, incr, dirpath) {
con=file(paste(dirpath, fn, sep=""),open="r")
txtLines=readLines(con)
long=length(txtLines)
for (i in 1:long){
if(length(grep("-->",txtLines[i]))>0) {
ln<-txtLines[i]
txtLines[i]<-paste(substr(strptime(substr(ln,1,8), "%H:%M:%S") + incr,12,23), substr(ln,9,17), substr(strptime(substr(ln,18,25), "%H:%M:%S") + incr,12,23), substr(ln,26,29), sep="")
}
}
close(con)
write(txtLines, file = paste(dirpath, fn, sep=""), ncolumns = 1, append = FALSE, sep = "\n")
return
}
dirpath<-"G:/"
incr=-1
fn <- "Tom Clancys Division Agents Origin.srt"
# Single file
subfix(fn, incr, dirpath)
require(stringr)
subfix<-function(fn, incr, dirpath) {
con=file(paste(dirpath, fn, sep=""),open="r")
txtLines=readLines(con)
long=length(txtLines)
for (i in 1:long){
if(length(grep("-->",txtLines[i]))>0) {
ln<-txtLines[i]
txtLines[i]<-paste(substr(strptime(substr(ln,1,8), "%H:%M:%S") + incr,12,23), substr(ln,9,17), substr(strptime(substr(ln,18,25), "%H:%M:%S") + incr,12,23), substr(ln,26,29), sep="")
}
}
close(con)
write(txtLines, file = paste(dirpath, fn, sep=""), ncolumns = 1, append = FALSE, sep = "\n")
return
}
dirpath<-"G:/"
incr=-1
fn <- "Tom Clancys Division Agents Origin.srt"
# Single file
subfix(fn, incr, dirpath)
library(IS606)
startLab("Lab8")
setwd("D:/CUNY/Courses/Statistics And Probability/CUNY-StatsAndProb")
startLab("Lab8")
load("more/evals.RData")
load("more/evals.RData")
setwd("D:/CUNY/Courses/Statistics And Probability/CUNY-StatsAndProb/Lab8")
load("more/evals.RData")
hist(evals$score)
summary(evals$score)
plot(evals$age, evals$score)
plot(evals$age, evals$bty_avg)
plot(evals$score ~ evals$bty_avg)
mosaicplot(evals$gender)
mosaicplot(evals$gender, evals$bty_avg)
library(vcd)
mosaic(evals$gender, evals$bty_avg)
mosaic(evals$gender~evals$bty_avg)
plot(evals$age, evals$bty_avg)
nrow(evals)
plot(evals$cls_did_eval, evals$bty_avg)
plot(evals$cls_perc_eval, evals$bty_avg)
plot(evals$cls_students, evals$bty_avg)
plot(evals$bty_avg, evals$cls_students)
plot(evals$score ~ evals$bty_avg)
? jitter
plot(evals$score ~ jitter(evals$bty_avg))
plot(evals$score ~ evals$bty_avg)
plot(evals$score ~ jitter(evals$bty_avg)
)
plot(jitter(evals$score) ~ evals$bty_avg)
plot(jitter(evals$score) ~ jitter(evals$bty_avg))
m_bty <- lm(evals$score ~ evals$bty_avg)
plot(jitter(evals$score) ~ jitter(evals$bty_avg))
abline(m_bty)
summary(m_bty)
m_bty$coefficients[1]
m_bty$coefficients[1]
m_bty$coefficients[2]
plot(m_bty$residuals ~ evals$bty_avg)
abline(h = 0, lty = 3)  # adds a horizontal dashed line at y = 0
plot(m_bty$residuals ~ evals$bty_avg)
abline(h = 0, lty = 2)
plot(m_bty$residuals ~ evals$bty_avg)
abline(h = 0, lty = 10)
plot(evals$bty_avg ~ evals$bty_f1lower)
cor(evals$bty_avg, evals$bty_f1lower)
plot(evals[,13:19])
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
qqnorm(m_bty_gen$residuals)
qqline(m_bty_gen$residuals)
dfResVsFit <- data.frame(residuals=abs(residuals(m_bty_gen)), fittedValue=fitted(m_bty_gen))
g7b <- ggplot(data=dfResVsFit) +
geom_point(aes(x=fittedValue, y=residuals)) +
myTheme +
labs(title="Residuals vs Fitted Values")
g7b
library(ggplot2)
dfResVsFit <- data.frame(residuals=abs(residuals(m_bty_gen)), fittedValue=fitted(m_bty_gen))
g7b <- ggplot(data=dfResVsFit) +
geom_point(aes(x=fittedValue, y=residuals)) +
myTheme +
labs(title="Residuals vs Fitted Values")
g7b
dfResVsFit <- data.frame(residuals=abs(residuals(m_bty_gen)), fittedValue=fitted(m_bty_gen))
g7b <- ggplot(data=dfResVsFit) +
geom_point(aes(x=fittedValue, y=residuals)) +
labs(title="Residuals vs Fitted Values")
g7b
dfResVsFit <- data.frame(residuals=abs(residuals(m_bty_gen)), fittedValue=fitted(m_bty_gen))
g7b <- ggplot(data=dfResVsFit) +
geom_point(aes(x=fittedValue, y=residuals)) +
labs(title="Residuals vs Fitted Values")
g7b
plot(m_bty$residuals ~ evals$bty_avg)
abline(h = 0, lty = 3)
plot(m_bty_gen$residuals ~ fitted(m_bty_gen))
abline(h = 0, lty = 3)
dfResVsFit <- data.frame(residuals=abs(residuals(m_bty_gen)), fittedValue=fitted(m_bty_gen))
g7b <- ggplot(data=dfResVsFit) +
geom_point(aes(x=fittedValue, y=residuals)) +
labs(title="Residuals vs Fitted Values")
g7b
dfResVsFit <- data.frame(residuals=(residuals(m_bty_gen)), fittedValue=fitted(m_bty_gen))
g7b <- ggplot(data=dfResVsFit) +
geom_point(aes(x=fittedValue, y=residuals)) +
labs(title="Residuals vs Fitted Values")
g7b
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(m_bty_gen)
dfResVsFit <- data.frame(residuals=abs(residuals(m_bty_gen)), bty_avg=evals$bty_avg)
g7c <- ggplot(data=dfResVsFit) +
geom_point(aes(x=bty_avg, y=residuals)) +
myTheme +
labs(title="Residuals vs Bty_avg Values")
g7c
dfResVsFit <- data.frame(residuals=abs(residuals(m_bty_gen)), bty_avg=evals$bty_avg)
g7c <- ggplot(data=dfResVsFit) +
geom_point(aes(x=bty_avg, y=residuals)) +
labs(title="Residuals vs Bty_avg Values")
g7c
dfResVsFit <- data.frame(residuals=abs(residuals(m_bty_gen)), gender=evals$gender)
g7d <- ggplot(data=dfResVsFit) +
geom_boxplot(aes(x=gender, y=residuals)) +
labs(title="Residuals vs Gender Values")
g7d
plot(evals[,13:19])
layout(matrix(c(1,2,3,4),2,2))
plot(m_bty_gen)
plot(m_bty_gen)
plot(m_bty_gen)
plot(m_bty_gen)
summary(m_bty_gen)
summary(m_bty)
summary(m_bty_gen)
m_bty$coefficients[1]
m_bty$residuals
m_bty$effects
summary(m_bty)
summary(m_bty_gen)
m_bty$coefficients[1]
m_bty$coefficients[4]
m_bty$coefficients[2]
m_bty$qr
m_bty
summary(m_bty)
m_bty$effects
m_bty$assign
m_bty$xlevels
m_bty$xlevels[1]
m_bty$xlevels
m_bty$qr
m_bty$df.residual
m_bty$model
m_bty$terms
m_bty$call
summary(m_bty)
summary(m_bty_gen)
m_bty_rank <- lm(score ~ bty_avg + rank, data = evals, y=TRUE)
summary(m_bty_rank)
m_bty_rank <- lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
m_bty_rank
m_bty_rank$xlevels
summary(m_bty_gen)
summary(m_bty_rank)
m_bty_rank$xlevels
m_bty_rank$rank
m_bty_rank$coefficients
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full$residuals
summary(m_full)
m_without_profs <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_without_profs)
m1 <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m1)
m_inter <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_inter)
m_inter <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval
+ cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_inter)
# removing pic_outfit
m_inter <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval
+ cls_credits + bty_avg
+ pic_color, data = evals)
summary(m_inter)
# removing language
m_inter <- lm(score ~ ethnicity + gender + age + cls_perc_eval
+ cls_credits + bty_avg
+ pic_color, data = evals)
summary(m_inter)
m_inter <- lm(score ~ ethnicity + gender + language + age + cls_perc_eval
+ cls_credits + bty_avg
+ pic_color, data = evals)
summary(m_inter)
qqnorm(m_inter$residuals)
qqline(m_inter$residuals)
plot(m_inter$residuals ~ fitted(m_inter))
abline(h = 0, lty = 3)
qqnorm(m_inter$residuals)
qqline(m_inter$residuals)
summary(m_inter)
vHigh <- c(1,     # Intercept
1,     # Ethnicity: Non minority
1,     # Gender: Male
0,     # Language: Non-english
29,    # Age
100,   # Percent of Class Evaluations
1,     # Credits: One Credit
8.167, # Average Beauty Score
0)     # Pic Color: Color
# Compute predicted score
score <- coefficients(m_inter) %*% vHigh
# Exceeds the maximum
score
score
dfModel <- data.frame(Estimate=c(11.6630, -0.2162),
StdError=c(3.2963, 0.0532),
zValue=c(3.54, -4.07),
PrAbsZ=c(0.0004, 0.0000))
rownames(dfModel) <- c('Intercept', 'Temperature')
dfModel
log(4,2)
log(9,2)
log(9,3)
log(8,2)
log(8,e)
temp=57
exp(11.6630 - (0.2162 * temp)) / (1 + exp(11.6630 - (0.2162 * temp)))
temp=65
exp(11.6630 - (0.2162 * temp)) / (1 + exp(11.6630 - (0.2162 * temp)))
temps <- seq(51, 71, by=2)
probs <- c(p51, p53, p55, 0.341, 0.251, 0.179, 0.124, 0.084, 0.056, 0.037, 0.024)
df_prob <- data.frame(Temperature=temps, Prob_Damage=probs)
temps <- seq(51, 71, by=2)
probs <- c(p51, p53, p55, 0.341, 0.251, 0.179, 0.124, 0.084, 0.056, 0.037, 0.024)
temp = 51
p51 <- exp(11.6630 - (0.2162 * temp)) / (1 + exp(11.6630 - (0.2162 * temp)))
p51
temp = 53
p53 <- exp(11.6630 - (0.2162 * temp)) / (1 + exp(11.6630 - (0.2162 * temp)))
p53
temp = 55
p55 <- exp(11.6630 - (0.2162 * temp)) / (1 + exp(11.6630 - (0.2162 * temp)))
p55
temps <- seq(51, 71, by=2)
probs <- c(p51, p53, p55, 0.341, 0.251, 0.179, 0.124, 0.084, 0.056, 0.037, 0.024)
df_prob <- data.frame(Temperature=temps, Prob_Damage=probs)
oringModel <- function(temp)
{
right <- 11.6630 - 0.2162 * temp
prob <- exp(right) / (1 + exp(right))
return (prob)
}
temps <- seq(32, 85)
dfProbDamage <- data.frame(Temperature=temps, ProbDamage=oringModel(temps))
g1 <- ggplot(dfProbDamage) + geom_line(aes(x=Temperature, y=ProbDamage )) + myTheme
g1
g1 <- ggplot(dfProbDamage) + geom_line(aes(x=Temperature, y=ProbDamage ))
g1
temps <- c(51,53,55)
dfProbDamage <- data.frame(Temperature=temps, ProbDamage=oringModel(temps))
dfProbDamage
dfRaw <- data.frame(Missing=seq(1, 23),
Temp=c(53,57,58,63,66,67,67,67,68,69,70,70,70,
70,72,73,75,75,76,76,78,79,81),
Damaged=c(5,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0),
Undamaged=c(1,5,5,5,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,6,6,6))
dfRaw$ProbDamage <- dfRaw$Damaged / (dfRaw$Damaged + dfRaw$Undamaged)
head(dfRaw)
temps <- seq(51, 71, by=2)
dfProbDamage <- data.frame(Temperature=temps, ProbDamage=oringModel(temps))
g1 <- ggplot(dfRaw) +
geom_point(aes(x=Temp, y=ProbDamage), alpha=0.5, colour="lightblue") +
geom_line(data=dfProbDamage, aes(x=Temperature, y=ProbDamage), colour="magenta") +
geom_point(data=dfProbDamage, aes(x=Temperature, y=ProbDamage), colour="magenta") +
labs(x="Temperature", y="Probability of damage") +
ylim(0, 1)
g1
plot(df_prob$Temperature ~ df_prob$Prob_Damage)
abline(h = 0, lty = 3)
plot(df_prob$Prob_Damage ~ df_prob$Temperature)
plot(df_prob$Prob_Damage ~ df_prob$Temperature)
abline(h = 0, lty = 3)
oringModel <- function(temp)
{
right <- 11.6630 - 0.2162 * temp
prob <- exp(right) / (1 + exp(right))
return (prob)
}
temps <- seq(32, 85)
dfProbDamage <- data.frame(Temperature=temps, ProbDamage=oringModel(temps))
g1 <- ggplot(dfProbDamage) + geom_line(aes(x=Temperature, y=ProbDamage ))
g1
g1 <- ggplot(df_prob) + geom_line(aes(x=df_prob$Temperature, y=df_prob$Prob_Damage ))
g1
