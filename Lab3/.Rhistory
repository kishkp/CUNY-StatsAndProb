intermediate_df[as.character(intermediate_df[,c(6:12)]),5]
intermediate_df[intermediate_df[,c(6:12)],5]
intermediate_df[unlist(intermediate_df[,c(6:12)]),5]
rowSums(intermediate_df[unlist(intermediate_df[1,c(6:12)]),5], na.rm=TRUE)
intermediate_df[unlist(intermediate_df[1,c(6:12)]),5]
intermediate_df[unlist(intermediate_df[1:2,c(6:12)]),5]
intermediate_df[intermediate_df[1:2,c(6:12)],5]
intermediate_df[as.vector(intermediate_df[1:2,c(6:12)]),5]
intermediate_df[unlist(intermediate_df[1:2,c(6:12)]),5]
intermediate_df[unlist(intermediate_df[,c(6:12)]),5]
apply(intermediate_df[unlist(intermediate_df[,c(6:12)]),5], 1, sum)
intermediate_df[unlist(intermediate_df[,c(6:12)]),5]
intermediate_df[unlist(intermediate_df[1,c(6:12)]),5]
intermediate_df<-cbind(intermediate_df, "Opp_1_prerate"=intermediate_df[ as.numeric(str_extract_all(rawdatafile[,"V4"], "[0-9]+")),5])
View(intermediate_df)
View(intermediate_df)
library(RCurl)
# The list below gives the width of each column in the fixed file. Each vector defines the layout per row of the data record. For convenience, we consider the lines containing "----" also as a column of the record.
# So the below defines a record spanning 3 rows with the column widths for each row as defined by the vectors in the list.
ColumnWidths <- list(c(7, 34, 6, 6,6,6,6,6,6,6), c(7, 34, 6, 6,6,6,6,6,6,6), 89)
# We now read the file from github and store the records.
rawdatafile <- read.fwf('https://raw.githubusercontent.com/kishkp/CUNY-DAM/master/tournamentinfo.txt',
widths = ColumnWidths,
skip = 4,
stringsAsFactors=FALSE)
rawdatafile<-rawdatafile[,c("V1", "V2", "V11", "V3", "V12", "V4", "V5", "V6", "V7", "V8", "V9", "V10")]
# Get the Player Row Numbers
intermediate_df<-data.frame("Player_Num"= as.numeric(str_extract_all(rawdatafile[,"V1"],"[0-9]+")))
# Get the Player Names
intermediate_df<-cbind(intermediate_df, "Player_Name"=unlist(str_extract_all(rawdatafile[,"V2"], "[^|]+")))
# Get the Players State
intermediate_df<-cbind(intermediate_df, "Player_State"=unlist(str_extract_all(rawdatafile[,"V11"], "[^|]+")))
# Get the total number of points
intermediate_df<-cbind(intermediate_df, "Player_Total_Points"=as.numeric(str_extract_all(rawdatafile[,"V3"], "[0-9\\.]+")))
# Get Players Prerating
intermediate_df<-cbind(intermediate_df, "Player_PreRate"=as.numeric(str_extract_all(str_extract_all(rawdatafile[,"V12"], "R: +[0-9]+"), "[0-9]+")))
# Get Opponent1 pre Rate
intermediate_df<-cbind(intermediate_df, "Opp1_PreRate"=intermediate_df[ as.numeric(str_extract_all(rawdatafile[,"V4"], "[0-9]+")),5])
# Get Opponent2 pre Rate
intermediate_df<-cbind(intermediate_df, "Opp2_PreRate"=intermediate_df[ as.numeric(str_extract_all(rawdatafile[,"V5"], "[0-9]+")),5])
# Get Opponent3 pre Rate
intermediate_df<-cbind(intermediate_df, "Opp3_PreRate"=intermediate_df[ as.numeric(str_extract_all(rawdatafile[,"V6"], "[0-9]+")),5])
# Get Opponent4 pre Rate
intermediate_df<-cbind(intermediate_df, "Opp4_PreRate"=intermediate_df[ as.numeric(str_extract_all(rawdatafile[,"V7"], "[0-9]+")),5])
# Get Opponent5 pre Rate
intermediate_df<-cbind(intermediate_df, "Opp5_PreRate"=intermediate_df[ as.numeric(str_extract_all(rawdatafile[,"V8"], "[0-9]+")),5])
# Get Opponent6 pre Rate
intermediate_df<-cbind(intermediate_df, "Opp6_PreRate"=intermediate_df[ as.numeric(str_extract_all(rawdatafile[,"V9"], "[0-9]+")),5])
# Get Opponent7 pre Rate
intermediate_df<-cbind(intermediate_df, "Opp7_PreRate"=intermediate_df[ as.numeric(str_extract_all(rawdatafile[,"V10"], "[0-9]+")),5])
View(intermediate_df)
View(intermediate_df)
intermediate_df[, c(6:12)]
rowSums(intermediate_df[, c(6:12)])
rowMeans(intermediate_df[, c(6:12)])
rowMeans(intermediate_df[, c(6:12)], na.rm=TRUE)
round(rowMeans(intermediate_df[, c(6:12)], na.rm=TRUE),0)
intermediate_df<-cbind(intermediate_df, "Player_Avg_Opp_PreRate"=round(rowMeans(intermediate_df[, c(6:12)], na.rm=TRUE),0))
View(intermediate_df)
View(intermediate_df)
final_ds <- intermediate_df[,c(2:5, 13)]
View(final_ds)
View(final_ds)
library(RCurl)
library(stringr)
# The list below gives the width of each column in the fixed file. Each vector defines the layout per row of the data record. For convenience, we consider the lines containing "----" also as a column of the record.
# So the below defines a record spanning 3 rows with the column widths for each row as defined by the vectors in the list.
ColumnWidths <- list(c(7, 34, 6, 6,6,6,6,6,6,6), c(7, 34, 6, 6,6,6,6,6,6,6), 89)
# We now read the file from github and store the records.
rawdatafile <- read.fwf('https://raw.githubusercontent.com/kishkp/CUNY-DAM/master/tournamentinfo.txt',
widths = ColumnWidths,
skip = 4,
stringsAsFactors=FALSE)
rawdatafile<-rawdatafile[,c("V1", "V2", "V11", "V3", "V12", "V4", "V5", "V6", "V7", "V8", "V9", "V10")]
# Get the Player Row Numbers
intermediate_df<-data.frame("Player_Num"= as.numeric(str_extract_all(rawdatafile[,"V1"],"[0-9]+")))
# Get the Player Names
intermediate_df<-cbind(intermediate_df, "Player_Name"=str_trim( unlist(str_extract_all(rawdatafile[,"V2"], "[^|]+")))
# Get the Players State
intermediate_df<-cbind(intermediate_df, "Player_State"=str_trim(unlist(str_extract_all(rawdatafile[,"V11"], "[^|]+"))))
# Get the Players State
intermediate_df<-cbind(intermediate_df, "Player_State"= str_trim( unlist(str_extract_all(rawdatafile[,"V11"], "[^|]+"))))
# Get the Player Names
intermediate_df<-cbind(intermediate_df, "Player_Name"=str_trim( unlist(str_extract_all(rawdatafile[,"V2"], "[^|]+")))
# Get the Player Row Numbers
intermediate_df<-data.frame("Player_Num"= as.numeric(str_extract_all(rawdatafile[,"V1"],"[0-9]+")))
# Get the Player Names
intermediate_df<-cbind(intermediate_df, "Player_Name"=str_trim( unlist(str_extract_all(rawdatafile[,"V2"], "[^|]+"))))
# Get the Players State
intermediate_df<-cbind(intermediate_df, "Player_State"= str_trim( unlist(str_extract_all(rawdatafile[,"V11"], "[^|]+"))))
# Get the total number of points
intermediate_df<-cbind(intermediate_df, "Player_Total_Points"=as.numeric(str_extract_all(rawdatafile[,"V3"], "[0-9\\.]+")))
require(stringr)
subfix<-function(fn, incr, dirpath) {
con=file(paste(dirpath, fn, sep=""),open="r")
txtLines=readLines(con)
long=length(txtLines)
for (i in 1:long){
if(length(grep("-->",txtLines[i]))>0) {
ln<-txtLines[i]
txtLines[i]<-paste(substr(strptime(substr(ln,1,8), "%H:%M:%S") + incr,12,23), substr(ln,9,17), substr(strptime(substr(ln,18,25), "%H:%M:%S") + incr,12,23), substr(ln,26,29), sep="")
}
}
close(con)
write(txtLines, file = paste(dirpath, fn, sep=""), ncolumns = 1, append = FALSE, sep = "\n")
return
}
dirpath<-"C:/Users/Administrator/Downloads"
incr=5
fn <- "Deadpool.srt"
# Single file
subfix(fn, incr, dirpath)
require(stringr)
subfix<-function(fn, incr, dirpath) {
con=file(paste(dirpath, fn, sep=""),open="r")
txtLines=readLines(con)
long=length(txtLines)
for (i in 1:long){
if(length(grep("-->",txtLines[i]))>0) {
ln<-txtLines[i]
txtLines[i]<-paste(substr(strptime(substr(ln,1,8), "%H:%M:%S") + incr,12,23), substr(ln,9,17), substr(strptime(substr(ln,18,25), "%H:%M:%S") + incr,12,23), substr(ln,26,29), sep="")
}
}
close(con)
write(txtLines, file = paste(dirpath, fn, sep=""), ncolumns = 1, append = FALSE, sep = "\n")
return
}
dirpath<-"C:/Users/Administrator/Downloads/"
incr=5
fn <- "Deadpool.srt"
# Single file
subfix(fn, incr, dirpath)
library("IS606")
setwd("D:/CUNY/Courses/Statistics And Probability/CUNY-StatsAndProb")
startLab("lab3")
startLab("Lab3")
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[df$x > zGt, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightblue") +
labs(title="a) Region Greater Than Z = -1.13", y="", x="") +
myTheme
g1
library(ggplot2)
zGt <- -1.13
pGt <- 1 - pnorm(zGt)
pGt
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[df$x > zGt, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightblue") +
labs(title="a) Region Greater Than Z = -1.13", y="", x="") +
myTheme
g1
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightblue") +
labs(title="a) Region Greater Than Z = -1.13", y="", x="") +
myTheme
library(ggplot2)
myTheme <- theme(axis.ticks=element_blank(),
panel.border = element_rect(color="gray", fill=NA),
panel.background=element_rect(fill="#FBFBFB"),
panel.grid.major.y=element_line(color="white", size=0.5),
panel.grid.major.x=element_line(color="white", size=0.5),
plot.title=element_text(size="10"))
zGt <- -1.13
pGt <- 1 - pnorm(zGt)
pGt
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[df$x > zGt, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightblue") +
labs(title="a) Region Greater Than Z = -1.13", y="", x="") +
myTheme
g1
zGt <- -1.13
pGt <- 1 - pnorm(zGt)
pGt
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[df$x > zGt, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightblue") +
labs(title="a) Region Greater Than Z = -1.13", y="", x="")
g1
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="black") +
labs(title="a) Region Greater Than Z = -1.13", y="", x="")
library(ggplot2)
zGt <- -1.13
pGt <- 1 - pnorm(zGt)
pGt
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[df$x > zGt, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="black") +
labs(title="a) Region Greater Than Z = -1.13", y="", x="")
g1
g1
library(ggplot2)
zGt <- -1.13
pGt <- 1 - pnorm(zGt)
pGt
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[df$x > zGt, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightgrey") +
labs(title="a) Region Greater Than Z = -1.13", y="", x="")
g1
library(ggplot2)
zGt <- -1.13
pGt <- 1 - pnorm(zGt)
pGt
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[df$x > zGt, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightgrey")
g1
zLt <- 0.18
pLt <- pnorm(zLt)
pLt
zGt <- 0.18
pGt <- pnorm(zGt)
pGt
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[df$x > zGt, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightgrey")
g1
zLt <- 0.18
pLt <- pnorm(zLt)
pLt
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[df$x < zLt, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightgray")
g1
zLt <- 8
pLt <- pnorm(zLt)
pLt
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[df$x < zLt, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightgray")
g1
zLt <- 8
pLt <- 1- pnorm(zLt)
pLt
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[df$x < zLt, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightgray")
g1
zGt <- 8
pGt <- 1 - pnorm(zGt)
round(pGt, 4)
x <- seq(-9, 9, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[df$x > zGt, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightgray")
g1
zGt <- 8
pGt <- 1 - pnorm(zGt)
round(pGt, 4)
zGt <- 8
pGt <- 1 - pnorm(zGt)
pGt
zAbs <- 0.5
pAbs <- 2 * (0.5 - pnorm(-1 * zAbs))
round(pAbs, 4)
x <- seq(-4, 4, length=100)
hx <- dnorm(x)
df <- data.frame(x, hx)
dfRegion <- df[(-1 * zAbs) < df$x & df$x < zAbs, ]
g1 <- ggplot(data=df) +
geom_line(aes(x=x, y=hx)) +
geom_ribbon(data=dfRegion, aes(ymin=0, ymax=hx, x=x), fill="lightgray")
g1
men3034mean <- 4313
men3034sd <- 583
leoTime <- 4948
leoZc <- (leoTime - men3034mean) / men3034sd
leoZc
women3034mean <- 5261
women3034sd <- 807
maryTime <- 5513
maryZc <- (maryTime - women3034mean) / women3034sd
maryZc
pFasterThanLeo <- pnorm(leoZc)
pFasterThanLeo
pLeoFasterThan <- 1 - pFasterThanLeo
pLeoFasterThan
pFasterThanMary <- pnorm(maryZc)
pFasterThanMary
pMaryFasterThan <- 1 - pFasterThanMary
pMaryFasterThan
percentBySd <- function(data, numSd)
{
m <- mean(data)
s <- sd(data)
sd1Lower <- m - (s * numSd)
sd1Upper <- m + (s * numSd)
sdData <- data[sd1Lower < data & data < sd1Upper]
pSdData <- length(sdData) / length(data)
return (pSdData)
}
# 1 Standard Deviation
sd1 <- percentBySd(heights, 1) * 100
# 2 Standard Deviation
sd2 <- percentBySd(heights, 2) * 100
# 3 Standard Deviation
sd3 <- percentBySd(heights, 3) * 100
sdList <- c(sd1, sd2, sd3)
heights <- c(54,55,56,56,57,58,58,59,60,60,60,61,61,62,62,63,63,63,64,65,65,67,67,69,73)
dfHeights <- data.frame(heights)
meanHeight <- mean(heights)
meanHeight
sdHeight <- sd(heights)
sdHeight
percentBySd <- function(data, numSd)
{
m <- mean(data)
s <- sd(data)
sd1Lower <- m - (s * numSd)
sd1Upper <- m + (s * numSd)
sdData <- data[sd1Lower < data & data < sd1Upper]
pSdData <- length(sdData) / length(data)
return (pSdData)
}
sd1 <- percentBySd(heights, 1) * 100
sd2 <- percentBySd(heights, 2) * 100
sd3 <- percentBySd(heights, 3) * 100
sdList <- c(sd1, sd2, sd3)
defectRate <- 0.02
successRate <-  1 - defectRate
n <- 10
p10 <- successRate^(n-1) * defectRate
p10
p100D <- 0
for(i in 1:100)
{
p100D <- p100D + (successRate^(i-1) * defectRate)
}
p100C <- 1 - p100D
P100c
p100C
defectRate <- 0.02
successRate <-  1 - defectRate
n <- 10
p10 <- successRate^(n-1) * defectRate
p10
defectRate <- 0.02
successRate <-  1 - defectRate
n <- 20
p10 <- successRate^(n-1) * defectRate
p10
defectRate <- 0.02
successRate <-  1 - defectRate
n <- 70
p10 <- successRate^(n-1) * defectRate
p10
defectRate <- 0.02
successRate <-  1 - defectRate
n <- 100
p10 <- successRate^(n-1) * defectRate
p10
defectRate <- 0.02
successRate <-  1 - defectRate
n <- 101
p10 <- successRate^(n-1) * defectRate
p10
expectedVal <- 1 / defectRate
expectedVal
stdevDef <- sqrt( (1 - defectRate) / defectRate^2 )
stdevDef
defectRate <- 0.05
expectedVal <- 1 / defectRate
expectedVal
stdevDef <- sqrt( (1 - defectRate) / defectRate^2 )
stdevDef
pBoy <- 0.51
k <- 2
n <- 3
facN <- factorial(n)
facK <- factorial(k)
facNminusK <- factorial(n-k)
p2boysOf3 <- ( facN / (facK * facNminusK) ) * pBoy^k * (1-pBoy)^(n-k)
p2boysOf3
p1 <- ((1-pBoy) * pBoy * pBoy) * 3
p1
1-pBoy
pServe <- 0.15
n <- 10
k <- 3
negBinomialDist <- function(p, n, k)
{
pRes <- (factorial(n - 1) /
(factorial(k-1) * (factorial((n - 1) - (k - 1)))
)
) *
p^k *
(1-p)^(n-k)
}
p3of10 <- negBinomialDist(pServe, n, k)
p3of10
hist(mdims$hgt)
load("more/bdims.RData")
setwd("D:/CUNY/Courses/Statistics And Probability/CUNY-StatsAndProb/Lab3")
load("more/bdims.RData")
head(bdims)
mdims <- subset(bdims, sex == 1)
fdims <- subset(bdims, sex == 0)
hist(mdims$hgt)
hist(mdims$hgt, xlab = "Male Height", main = "", xlim = c(140, 190), ylim = c(0, 80));
hist(mdims$hgt)
hist(mdims$hgt, xlab = "Male Height", main = "", xlim = c(140, 190), ylim = c(0, 80));
hist(fdims$hgt)
hist(mdims$hgt, main="Male Height Histogram" )
hist(mdims$hgt, main="Male Height Histogram" )
hist(fdims$hgt, main="Female Height Histogram" )
hist(mdims$hgt, main="Male Height Histogram" )
hist(fdims$hgt, main="Female Height Histogram" )
fhgtmean <- mean(fdims$hgt)
fhgtsd   <- sd(fdims$hgt)
hist(fdims$hgt, probability = TRUE)
x <- 140:190
y <- dnorm(x = x, mean = fhgtmean, sd = fhgtsd)
lines(x = x, y = y, col = "blue")
qqnorm(fdims$hgt)
qqline(fdims$hgt)
sim_norm <- rnorm(n = length(fdims$hgt), mean = fhgtmean, sd = fhgtsd)
qqnorm(sim_norm)
qqline(sim_norm)
qqnorm(fdims$hgt)
qqline(fdims$hgt)
qqnorm(sim_norm)
qqline(sim_norm)
qqnormsim(fdims$hgt)
qqnorm(fdims$wgt)
qqline(fdims$wgt)
1 - pnorm(q = 182, mean = fhgtmean, sd = fhgtsd)
sum(fdims$hgt > 182) / length(fdims$hgt)
hist(fdims$bii.di)
p153andTaller <- pnorm(153, fhgtmean, fhgtsd)
p153andTaller
p153andTaller_emp <- sum(fdims$hgt < 153) / length(fdims$hgt)
p153andTaller_emp
p153andTaller <- 1- pnorm(153, fhgtmean, fhgtsd)
p153andTaller
# calculating Empirically
p153andTaller_emp <- sum(fdims$hgt > 153) / length(fdims$hgt)
p153andTaller_emp
p65andMore <- 1- pnorm(65, mean(fdims$wgt), sd(fdims$wgt))
p65andMore
p65andMore <- 1- pnorm(65, mean(fdims$wgt), sd(fdims$wgt))
p65andMore
# calculating Empirically
p65andMore_emp <- sum(fdims$wgt > 65) / length(fdims$wgt)
p65andMore_emp
p153andTaller <- 1- pnorm(153, fhgtmean, fhgtsd)
p153andTaller
# calculating Empirically
p153andTaller_emp <- sum(fdims$hgt > 153) / length(fdims$hgt)
p153andTaller_emp
p72andLess <- pnorm(72, mean(fdims$wgt), sd(fdims$wgt))
p72andLess
# calculating Empirically
p72andLess_emp <- sum(fdims$wgt < 72) / length(fdims$wgt)
p72andLess_emp
load("more/bdims.RData")
mdims <- subset(bdims, sex == 1)
fdims <- subset(bdims, sex == 0)
hist(mdims$hgt, main="Male Height Histogram" )
qqnorm(fdims$kne.di)
qqline(fdims$kne.di)
